
# This file was *autogenerated* from the file coppersmith_method.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_10000 = Integer(10000); _sage_const_40 = Integer(40); _sage_const_0p1 = RealNumber('0.1'); _sage_const_0p5 = RealNumber('0.5'); _sage_const_7p0 = RealNumber('7.0')
def coppersmith (f , N , epsilon=_sage_const_0p1  , fastLLL=False, debug=False ) :
	if epsilon > _sage_const_1  / _sage_const_7p0  or epsilon <= _sage_const_0  :
		print ( " invalid epsilon " )
		return None
	f.change_ring ( Integers ( N ) )
	delta=f.degree ( )
	m=ceil ( _sage_const_1  / delta / epsilon )
	R = ZZ ['x']; (x,) = R._first_ngens(1)
	# construction of the g [i , j ]( x )
	g=[]
	for j in range (_sage_const_0  , delta ) :
		g.append ( [ ] )
		for i in range (_sage_const_1  , m + _sage_const_1  ) :
			g [ j ].append ( x ** j * N ** ( i ) * f ** ( m - i ) )
 	X=ceil ( _sage_const_0p5  * N ** ( _sage_const_1  / delta - epsilon ) )
	if debug : print ( " X=" + str ( X ) )
	size=m * delta
	# construct B from g [i , j ]( X * x )
	B=matrix ( ZZ , size , size )
	compteur=_sage_const_0 

	for i in range ( - m +_sage_const_1  , _sage_const_1  ) :
		for j in range (_sage_const_0  , delta ) :
			polylist=g [ j ] [ - i ] ( X * x ).list ( )
			vector=[ _sage_const_0  ] * size
			vector [ _sage_const_0  : len ( polylist ) ]=polylist
			vector.reverse ( )
			B.set_column ( compteur , vector )
			compteur=compteur + _sage_const_1 
	if debug : show ( B )
	if debug : print " LLL starts "
	coeffs=[ ]
	coeffs = B.transpose ( ).LLL( ).transpose ( ).column ( _sage_const_0  ).list ( )
	coeffs.reverse ( )
	g=_sage_const_0 *x
	for i in range (_sage_const_0  , size ) :
		g=g + Integer ( coeffs [ i ] / X ** i ) * x ** i
	roots=g.roots ( multiplicities=False )
	result=[ ]

	for i in range (_sage_const_0  , len ( roots ) ) :
		if gcd (N , f ( roots [ i ] ) ) >=N :
			result.append ( roots [ i ] )
	return result

R = ZZ ['x']; (x,) = R._first_ngens(1)
f=( x - _sage_const_1  ) * ( x - _sage_const_2  ) * ( x - _sage_const_3  ) * ( x - _sage_const_4  ) * ( x - _sage_const_40  )
print coppersmith (f , _sage_const_10000  )

