
# This file was *autogenerated* from the file coppersmith.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_4 = Integer(4); _sage_const_1024 = Integer(1024); _sage_const_200 = Integer(200)
import time 

debug = True

#display the matrix(lower triangular)
def matrix_overview(BB,bound):
	for ii in range(BB.dimensions()[_sage_const_0 ]):
		a = ('%02d' %ii)
		for jj in range(BB.dimensions()[_sage_const_1 ]):
			a += '0' if BB[ii,jj] == _sage_const_0  else 'X'
			a += ' '
		if BB[ii,ii] >=bound:
			a += '~'
		print a 

def coppersmith_howgrave_graham(pol, modulus, beta, mm, tt, XX):
	
    dd = pol.degree()
    nn = dd*mm + tt
    #
    # checks
    #
    if not _sage_const_0  < beta <= _sage_const_1 :
        raise ValueError("beta should belongs in (0, 1]")

    if not pol.is_monic():
        raise ArithmeticError("Polynomial must be monic.")

    #
    # calculate bounds and display them
    #
    """
    * we want to find g(x) such that ||g(xX)|| <= b^m / sqrt(n)

    * we know LLL will give us a short vector v such that:
    ||v|| <= 2^((n - 1)/4) * det(L)^(1/n)

    * we will use that vector as a coefficient vector for our g(x)
    
    * so we want to satisfy:
    2^((n - 1)/4) * det(L)^(1/n) < N^(beta*m) / sqrt(n)
    
    so we can obtain ||v|| < N^(beta*m) / sqrt(n) <= b^m / sqrt(n)
    (it's important to use N because we might not know b)
    """
    if debug:
	# t optimized?
	print "\n# Optimized t?\n"
	print "we want X^(n-1) < N^(beta*m) so that each vector is helpful"
	cond1 = RR(XX**(nn-_sage_const_1 ))
	print "* X^(n-1) = ", cond1
	cond2 = pow(modulus, beta*mm)
	print "* N^(beta*m) = ", cond2
	print "* X^(n-1) < N^(beta*m) \n-> GOOD" if cond1 < cond2 else "* X^(n-1) >= N^(beta*m) \n-> NOT GOOD"
	
	# bound for X
	print "\n# X bound respected?\n"
	print "we want X <= N^(((2*beta*m)/(n-1)) - ((delta*m*(m+1))/(n*(n-1)))) / 2 = M"
	print "* X =", XX
	cond2 = RR(modulus**(((_sage_const_2 *beta*mm)/(nn-_sage_const_1 )) - ((dd*mm*(mm+_sage_const_1 ))/(nn*(nn-_sage_const_1 )))) / _sage_const_2 )
	print "* M =", cond2
	print "* X <= M \n-> GOOD" if XX <= cond2 else "* X > M \n-> NOT GOOD"

	# solution possible?
	print "\n# Solutions possible?\n"
	detL = RR(modulus**(dd * mm * (mm + _sage_const_1 ) / _sage_const_2 ) * XX**(nn * (nn - _sage_const_1 ) / _sage_const_2 ))
	print "we can find a solution if 2^((n - 1)/4) * det(L)^(1/n) < N^(beta*m) / sqrt(n)"
	cond1 = RR(_sage_const_2 **((nn - _sage_const_1 )/_sage_const_4 ) * detL**(_sage_const_1 /nn))
	print "* 2^((n - 1)/4) * det(L)^(1/n) = ", cond1
	cond2 = RR(modulus**(beta*mm) / sqrt(nn))
	print "* N^(beta*m) / sqrt(n) = ", cond2
	print "* 2^((n - 1)/4) * det(L)^(1/n) < N^(beta*m) / sqrt(n) \n-> SOLUTION WILL BE FOUND" if cond1 < cond2 else "* 2^((n - 1)/4) * det(L)^(1/n) >= N^(beta*m) / sqroot(n) \n-> NO SOLUTIONS MIGHT BE FOUND (but we never know)"

	# warning about X
	print "\n# Note that no solutions will be found _for sure_ if you don't respect:\n* |root| < X \n* b >= modulus^beta\n"



    #change ring of pol and x 
    polZ = pol.change_ring(ZZ)
    x    = polZ.parent().gen()
    
    gg = []
    for ii in range(mm):
    	for jj in range(dd):
    		gg.append((x*XX)**jj *modulus**(mm-ii)*polZ(x*XX)**ii)
    for ii in range(tt):
    	gg.append((x*XX)*ii*polZ(x*XX)*mm)
    
    BB = Matrix(ZZ,nn)
    
    for ii in range(nn):
    	for jj in range(ii+_sage_const_1 ):
    		BB[ii,jj] = gg[ii][jj]
    
    #display basis matrix 
    if debug:
    	matrix_overview(BB,modulus**mm)
    
    #LLL
    BB = BB.LLL()
    
    new_pol = _sage_const_0 
    for ii in range(nn):
    	new_pol += x*ii*BB[_sage_const_0 ,ii]/XX**ii
    
    #factor the polynomial 
    
    potential_roots = new_pol.roots()
    print "potential roots: ", potential_roots
    
    #test roots 
    roots = []
    for root in potential_roots:
    	if root[_sage_const_0 ].is_integer():
    		result = polZ(ZZ(root[_sage_const_0 ]))
    		if gcd(modulus,result) >= modulus**beta:
    			roots.append(ZZ(root[_sage_const_0 ]))
    return roots 

#test 

length_N = _sage_const_1024 
Kbits    = _sage_const_200   #size of root
e = _sage_const_3 

p = next_prime(_sage_const_2 **int(round(length_N/_sage_const_2 )))
q = next_prime(p)
N = p*q
ZmodN = Zmod(N);

K = ZZ.random_element(_sage_const_0 , _sage_const_2 **Kbits)
Kdigits = K.digits(_sage_const_2 )
M = [_sage_const_0 ]*Kbits + [_sage_const_1 ]*(length_N-Kbits);
for i in range(len(Kdigits)):
	M[i] = Kdigits[i] 
M = ZZ(M, _sage_const_2 )
C = ZmodN(M)**e

P = PolynomialRing(ZmodN, names=('x',)); (x,) = P._first_ngens(1)
pol = (_sage_const_2 **length_N - _sage_const_2 **Kbits + x)**e - C
dd = pol.degree()
beta = _sage_const_1 
epsilon = beta/_sage_const_7 
mm = ceil(beta**_sage_const_2 /(dd*epsilon))
tt = _sage_const_0 
XX = ceil(N**(_sage_const_1 /dd)-epsilon)
start_time = time.time()
roots = coppersmith_howgrave_graham(pol, N, beta, mm, tt, XX)

print "Solutions"
print "we want to find:",str(K)
print "we found:", str(roots)
print(time.time() - start_time)	

