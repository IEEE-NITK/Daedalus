
# This file was *autogenerated* from the file partial_message_exposure.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1p0 = RealNumber('1.0'); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7)
import time
from Crypto.Util.number import bytes_to_long, long_to_bytes 

def partial_message_exposure(input):
    
    N = input['N']
    e = input['e']
    C = input['C']
    K = input['known_plaintext']
    
    ZmodN = Zmod(N)
    P = PolynomialRing(ZmodN, names=('x',)); (x,) = P._first_ngens(1)
    pol   = (K+x)**e - C 
    dd    = pol.degree()
    
    beta  = _sage_const_1p0 
    epsilon = beta/_sage_const_7 
    mm = ceil(beta**_sage_const_2 /(dd*epsilon))
    tt = floor(dd * mm * ((_sage_const_1 /beta) - _sage_const_1 ))
    XX = ceil(N**((beta**_sage_const_2 /dd)-epsilon))
    roots = coppersmith_howgrave_univariate(pol, N, beta, mm, tt, XX)
    result = {}
    result['results'] = roots
    result['errors']  = 'No error'
    if(len(roots)==_sage_const_0 ):
    	result['errors'] = 'No solution found'
    return result 
	

