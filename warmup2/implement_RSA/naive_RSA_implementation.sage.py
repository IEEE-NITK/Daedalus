
# This file was *autogenerated* from the file naive_RSA_implementation.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_1024 = Integer(1024); _sage_const_1025 = Integer(1025); _sage_const_0x10001 = Integer(0x10001)
def modexp(a, b, n):
	a_power_b_mod_n = _sage_const_1 
	for i in list(Integer.binary(b)):
		a_power_b_mod_n = mod(a_power_b_mod_n*a_power_b_mod_n, n)
		if(Integer(i)==_sage_const_1 ):
			a_power_b_mod_n = mod(a_power_b_mod_n*a, n)
	return Integer(a_power_b_mod_n)

def generate_keys():
	prime1 = random_prime(_sage_const_2 **_sage_const_1025 -_sage_const_1 ,False,_sage_const_2 **_sage_const_1024 )
	prime2 = random_prime(_sage_const_2 **_sage_const_1025 -_sage_const_1 ,False,_sage_const_2 **_sage_const_1024 )
	print "prime1- " + str(prime1)
	print "prime2- " + str(prime2)
	N = prime1*prime2
	phi_N = (prime1-_sage_const_1 )*(prime2-_sage_const_1 )
	e = _sage_const_0x10001 
	print "modulus N- " + str(N)
	print "public key exponent e- " + str(e)
	bezout = xgcd(e, phi_N)
	d = Integer(mod(bezout[_sage_const_1 ], phi_N))
	print "private key exponent d- " + str(d)
	return [N,e,phi_N,d]

##message = Integer(raw_input("Enter message(max length 2048 bits)- "))
##key_list = generate_keys()
##print "message- " + str(message)
##N = key_list[0]
##e = key_list[1]
##phi_N = key_list[2]
#d = key_list[3]
#
##Encryption
#ciphertext = modexp(message, e, N)
#print "ciphertext- " + str(ciphertext)
#
##Decryption
#plaintext = modexp(ciphertext, d, N)
#print "decrpyted plaintext- " + str(plaintext)
#print plaintext == message	

